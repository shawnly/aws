AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway + Lambda to serve .der files from S3 with IP restriction

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket storing .der files

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3LambdaApiGatewayRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  GetDerFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetDerFileLambda
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Code:
        ZipFile: |
          import boto3
          import base64
          import urllib.parse
          import os

          s3 = boto3.client('s3')
          BUCKET_NAME = os.environ['BUCKET_NAME']

          def lambda_handler(event, context):
              try:
                  path = event['rawPath'].lstrip('/')
                  key = urllib.parse.unquote_plus(path)

                  response = s3.get_object(Bucket=BUCKET_NAME, Key=key)
                  content = response['Body'].read()

                  return {
                      'statusCode': 200,
                      'isBase64Encoded': True,
                      'headers': {
                          'Content-Type': 'application/x-x509-ca-cert',
                          'Content-Disposition': f'attachment; filename="{key.split('/')[-1]}"'
                      },
                      'body': base64.b64encode(content).decode('utf-8')
                  }
              except Exception as e:
                  return {
                      'statusCode': 404,
                      'body': str(e)
                  }

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: DerFileHttpApi
      ProtocolType: HTTP
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: arn:aws:execute-api:*:*:*/*/*/*
            Condition:
              IpAddress:
                aws:SourceIp:
                  - 203.0.113.5
                  - 198.51.100.0/24

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDerFileLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /{proxy+}
      Target: !Sub integrations/${ApiIntegration}

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      ApiId: !Ref HttpApi
      AutoDeploy: true

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetDerFileLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/*