AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API with ping-pong message handling and DynamoDB integration

Resources:

  # DynamoDB Table to store WebSocket connection data
  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebSocketConnections
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # WebSocket API resource
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # Lambda function for handling WebSocket connection events
  WebSocketConnectLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: connection-manager/lambda-function.lambda_handler
      Runtime: python3.9
      CodeUri: ./connection-manager/
      MemorySize: 128
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref WebSocketConnectionsTable

  # Lambda function for handling WebSocket disconnection events
  WebSocketDisconnectLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: connection-manager/lambda-function.lambda_handler
      Runtime: python3.9
      CodeUri: ./connection-manager/
      MemorySize: 128
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref WebSocketConnectionsTable

  # Lambda function for handling messages, including ping-pong and querying the DynamoDB table
  WebSocketMessageLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feature-toggle-message/lambda-function.lambda_handler
      Runtime: python3.9
      CodeUri: ./feature-toggle-message/
      MemorySize: 128
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
          DYNAMODB_TABLE_NAME: !Ref WebSocketConnectionsTable

  # Integration for WebSocket connect route
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectLambda.Arn}/invocations
      IntegrationMethod: POST

  # Integration for WebSocket disconnect route
  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectLambda.Arn}/invocations
      IntegrationMethod: POST

  # Integration for WebSocket default message route
  WebSocketMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageLambda.Arn}/invocations
      IntegrationMethod: POST

  # WebSocket $connect route (handles new connections)
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub arn:aws:apigateway:${AWS::Region}::lambda:path/2015-03-31/functions/${WebSocketConnectLambda.Arn}/invocations

  # WebSocket $disconnect route (handles disconnections)
  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub arn:aws:apigateway:${AWS::Region}::lambda:path/2015-03-31/functions/${WebSocketDisconnectLambda.Arn}/invocations

  # WebSocket $default route (handles all other messages, including ping-pong)
  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub arn:aws:apigateway:${AWS::Region}::lambda:path/2015-03-31/functions/${WebSocketMessageLambda.Arn}/invocations

  # WebSocket deployment stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: Prod
      AutoDeploy: true

Outputs:
  WebSocketApiUrl:
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Description: WebSocket API URL
