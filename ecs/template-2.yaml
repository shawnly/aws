AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Application with ALB, Security Group, RDS, and ECS Cluster"

Resources:
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "ECS-VPC"

  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: "Name"
          Value: "Public-Subnet1"

  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: "Name"
          Value: "Public-Subnet2"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "ECS-IGW"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "Public-Route-Table"

  Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow traffic for ports 8080 and 8090"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8090
          ToPort: 8090
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "ECS-SG"

  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: "internet-facing"

  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VPC
      Protocol: "HTTP"
      Port: 8080
      TargetType: "instance"
      HealthCheckPath: "/health"

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Protocol: "HTTP"
      Port: 80

  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceClass: "db.t3.small"
      AllocatedStorage: 20
      Engine: "postgres"
      EngineVersion: "12.10"
      MasterUsername: "admin"
      MasterUserPassword: "StrongPassword123!"
      VPCSecurityGroups:
        - !Ref SecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "ECSCluster"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: 
        - !Ref ECSRole

  ECSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  EC2LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        InstanceType: "t3.small"
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: "1"
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      RequiresCompatibilities:
        - "EC2"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "bridge"
      ContainerDefinitions:
        - Name: "app-container"
          Image: "your-ecr-image-url:latest"
          PortMappings:
            - ContainerPort: 8080

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: "EC2"
      LoadBalancers:
        - ContainerName: "app-container"
          ContainerPort: 8080
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  ALBEndpoint:
    Description: "Application Load Balancer URL"
    Value: !GetAtt ALB.DNSName

