AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Dockerized Services with ECS, RDS, and ALB'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy resources into

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for resources

  DeployServiceA:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Deploy Service A

  DeployServiceB:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Deploy Service B

  ECRRepositoryServiceA:
    Type: String
    Description: ECR Repository URI for Service A

  ECRRepositoryServiceB:
    Type: String
    Description: ECR Repository URI for Service B

Resources:
  # Security Group for ALB
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups: 
        - !Ref ApplicationLoadBalancerSecurityGroup

  # Target Groups
  ServiceATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: /service-a/health
      TargetType: ip

  ServiceBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 8090
      Protocol: HTTP
      HealthCheckPath: /service-b/health
      TargetType: ip

  # ALB Listeners
  ServiceAListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Conditions: 
      - !Equals [!Ref DeployServiceA, 'true']
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServiceATargetGroup

  ServiceBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Conditions: 
      - !Equals [!Ref DeployServiceB, 'true']
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServiceBTargetGroup

  # RDS Postgres
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Postgres
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  PostgresDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for Postgres RDS
      SubnetIds: !Ref Subnets

  PostgresDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: '12.10'
      DBInstanceClass: db.t3.small
      AllocatedStorage: '20'
      MasterUsername: postgres
      MasterUserPassword: changepasswordhere
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref PostgresDBSubnetGroup

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyDockerCluster

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8090
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup

  # ECS Task Definitions (Sample)
  ServiceATaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Conditions: 
      - !Equals [!Ref DeployServiceA, 'true']
    Properties:
      Family: service-a
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: service-a
          Image: !Ref ECRRepositoryServiceA
          PortMappings:
            - ContainerPort: 8080
      RequiresCompatibilities:
        - FARGATE

  ServiceBTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Conditions: 
      - !Equals [!Ref DeployServiceB, 'true']
    Properties:
      Family: service-b
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: service-b
          Image: !Ref ECRRepositoryServiceB
          PortMappings:
            - ContainerPort: 8090
      RequiresCompatibilities:
        - FARGATE

  # ECS Services
  ServiceAService:
    Type: AWS::ECS::Service
    Conditions: 
      - !Equals [!Ref DeployServiceA, 'true']
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ServiceATaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: service-a
          ContainerPort: 8080
          TargetGroupArn: !Ref ServiceATargetGroup

  ServiceBService:
    Type: AWS::ECS::Service
    Conditions: 
      - !Equals [!Ref DeployServiceB, 'true']
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ServiceBTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: service-b
          ContainerPort: 8090
          TargetGroupArn: !Ref ServiceBTargetGroup

Outputs:
  LoadBalancerDNS:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
