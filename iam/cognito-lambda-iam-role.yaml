AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  Stage:
    Type: String
    Default: prod
    Description: API Gateway stage

Resources:
  # IAM Role for Lambda
  WebSocketAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-idp:GetUser'
                  - 'cognito-idp:GetUserPoolMfaConfig'
                  - 'cognito-idp:ListUserPoolClients'
                  - 'cognito-idp:DescribeUserPoolClient'
                Resource: 
                  - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
                  - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}/*'

  WebSocketAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizer/
      Handler: app.handler
      Runtime: python3.9
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt WebSocketAuthorizerRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPoolId
      Layers:
        - !Ref DependencyLayer

  # Layer for Python dependencies
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: websocket-auth-dependencies
      Description: Dependencies for WebSocket authorizer
      ContentUri: ./layer/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  # API Gateway permissions
  WebSocketAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketAuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*'

Outputs:
  WebSocketAuthorizerArn:
    Description: "WebSocket Authorizer Lambda ARN"
    Value: !GetAtt WebSocketAuthorizerFunction.Arn
  WebSocketAuthorizerRoleArn:
    Description: "WebSocket Authorizer Role ARN"
    Value: !GetAtt WebSocketAuthorizerRole.Arn