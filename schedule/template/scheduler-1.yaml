AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for separate EC2 and RDS schedulers using EventBridge Scheduler'

Parameters:
  EC2StartTime:
    Type: String
    Description: 'Cron expression for EC2 start time'
    Default: 'cron(0 8 ? * MON-FRI *)'
  
  EC2StopTime:
    Type: String
    Description: 'Cron expression for EC2 stop time'
    Default: 'cron(0 18 ? * MON-FRI *)'
  
  RDSStartTime:
    Type: String
    Description: 'Cron expression for RDS start time'
    Default: 'cron(0 8 ? * MON-FRI *)'
  
  RDSStopTime:
    Type: String
    Description: 'Cron expression for RDS stop time'
    Default: 'cron(0 18 ? * MON-FRI *)'
  
  TagKey:
    Type: String
    Description: 'Tag key to identify resources'
    Default: 'scheduled'
  
  TagValue:
    Type: String
    Description: 'Tag value to identify resources'
    Default: 'true'
  
  EventId:
    Type: String
    Description: 'Event identifier'
    Default: '101'

  EC2SchedulerRoleArn:
    Type: String
    Description: 'ARN of the EC2 Scheduler Lambda Role'

  RDSSchedulerRoleArn:
    Type: String
    Description: 'ARN of the RDS Scheduler Lambda Role'

Resources:
  # Lambda Functions
  EC2SchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ec2-scheduler
      Handler: index.lambda_handler
      Role: !Ref EC2SchedulerRoleArn
      Code:
        ZipFile: !Sub |
          # EC2 Lambda function code here
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-scheduler

  RDSSchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-rds-scheduler
      Handler: index.lambda_handler
      Role: !Ref RDSSchedulerRoleArn
      Code:
        ZipFile: !Sub |
          # RDS Lambda function code here
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-rds-scheduler

  # Scheduler Role for EventBridge Scheduler
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: 
                  - !GetAtt EC2SchedulerLambda.Arn
                  - !GetAtt RDSSchedulerLambda.Arn

  # EventBridge Schedulers
  EC2StartSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-ec2-start-schedule
      Description: 'Schedule to start EC2 instances'
      FlexibleTimeWindow:
        Mode: OFF
      ScheduleExpression: !Ref EC2StartTime
      Target:
        Arn: !GetAtt EC2SchedulerLambda.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: !Sub |
          {
            "action": "start",
            "tag_key": "${TagKey}",
            "tag_value": "${TagValue}",
            "event_id": "${EventId}"
          }
      State: ENABLED

  EC2StopSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-ec2-stop-schedule
      Description: 'Schedule to stop EC2 instances'
      FlexibleTimeWindow:
        Mode: OFF
      ScheduleExpression: !Ref EC2StopTime
      Target:
        Arn: !GetAtt EC2SchedulerLambda.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: !Sub |
          {
            "action": "stop",
            "tag_key": "${TagKey}",
            "tag_value": "${TagValue}",
            "event_id": "${EventId}"
          }
      State: ENABLED

  RDSStartSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-rds-start-schedule
      Description: 'Schedule to start RDS instances'
      FlexibleTimeWindow:
        Mode: OFF
      ScheduleExpression: !Ref RDSStartTime
      Target:
        Arn: !GetAtt RDSSchedulerLambda.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: !Sub |
          {
            "action": "start",
            "tag_key": "${TagKey}",
            "tag_value": "${TagValue}",
            "event_id": "${EventId}"
          }
      State: ENABLED

  RDSStopSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-rds-stop-schedule
      Description: 'Schedule to stop RDS instances'
      FlexibleTimeWindow:
        Mode: OFF
      ScheduleExpression: !Ref RDSStopTime
      Target:
        Arn: !GetAtt RDSSchedulerLambda.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: !Sub |
          {
            "action": "stop",
            "tag_key": "${TagKey}",
            "tag_value": "${TagValue}",
            "event_id": "${EventId}"
          }
      State: ENABLED

Outputs:
  EC2LambdaArn:
    Description: 'ARN of the EC2 Lambda function'
    Value: !GetAtt EC2SchedulerLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ec2-lambda-arn

  RDSLambdaArn:
    Description: 'ARN of the RDS Lambda function'
    Value: !GetAtt RDSSchedulerLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-rds-lambda-arn

  EC2StartScheduleName:
    Description: 'Name of the EC2 Start Schedule'
    Value: !Ref EC2StartSchedule

  EC2StopScheduleName:
    Description: 'Name of the EC2 Stop Schedule'
    Value: !Ref EC2StopSchedule

  RDSStartScheduleName:
    Description: 'Name of the RDS Start Schedule'
    Value: !Ref RDSStartSchedule

  RDSStopScheduleName:
    Description: 'Name of the RDS Stop Schedule'
    Value: !Ref RDSStopSchedule